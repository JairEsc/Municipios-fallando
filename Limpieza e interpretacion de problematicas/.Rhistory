names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[reg]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
ballasa_p_mun |> colnames()
data_final |> colnames()
data_final=merge(data_inicial,regiones,by.x='Sector--Municipio',by.y = 'Municipio',all.x=T) |>
dplyr::relocate(Región,.after   = `Sector--Municipio`)
data_final$`Sector--Municipio` |> unique()
#data_final$`Sector--Municipio`[data_final$`Sector--Municipio`=="San Agustrn Metzquititlán"]="San Agustín Metzquititlán"
#data_final$`Sector--Municipio`[data_final$`Sector--Municipio`=="Zapotlan de Júarez"]="Zapotlán de Júarez"
data_final=data_final |>
dplyr::select(-c(`INDEMUN--Bando de Policía y Gobierno`:`INDEMUN--Acciones del municipio para disminuir la vulnerabilidad ante el cambio climático`))
lista_regiones=list()
ballasa_p_mun=read.csv("balassa_p_mun_c_region.csv",fileEncoding = "latin1")
Names=c("Minería.No.Metálicos","Minería.Metálicos","Industria.Química","Fabricación.de.equipo.electrónico.y.eléctrico",
"Fabricación.de.carrocerías..y.equipo.de.transporte.etc","Fabricación.de.maquinaria","Fabricación.de.muebles",
"Maquiladoras.y.textileras","Comunicaciones.y.transportes.paqueteria","Manufactura.metal.y.herreria",
"Alimentos.y.bebidas","Explotacion.de.animales","Fabricación.de.material.de.construcción","Hospedaje",
"Industria.del.papel","Banca.y.seguros")
data_final=merge(data_final,ballasa_p_mun |> dplyr::select(c(NOM_MUN,dplyr::matches(Names))),by.x='Sector--Municipio',by.y='NOM_MUN',all.x=T)
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. ))))
conteo_por_columna <- data_final2 |>
dplyr::summarise(dplyr::across(.fns = ~ sum(!is.na(.) ))) |>
tidyr::pivot_longer(
cols = everything(),
names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[reg]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
View(lista_regiones)
lista_regiones=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. ))))
conteo_por_columna <- data_final2 |>
dplyr::summarise(dplyr::across(.fns = ~ sum(!is.na(.) ))) |>
tidyr::pivot_longer(
cols = everything(),
names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[vocacion]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
View(lista_regiones)
openxlsx::write.xlsx(lista_regiones,"conteo_municipios_Con_Vocacion_c_problematica_de_indicadores.xlsx")
lista_regiones=list()
ballasa_p_mun=read.csv("balassa_p_mun_c_region.csv",fileEncoding = "latin1")
Names=c("Minería.No.Metálicos","Minería.Metálicos","Industria.Química","Fabricación.de.equipo.electrónico.y.eléctrico",
"Fabricación.de.carrocerías..y.equipo.de.transporte.etc","Fabricación.de.maquinaria","Fabricación.de.muebles",
"Maquiladoras.y.textileras","Comunicaciones.y.transportes.paqueteria","Manufactura.metal.y.herreria",
"Alimentos.y.bebidas","Explotacion.de.animales","Fabricación.de.material.de.construcción","Hospedaje",
"Industria.del.papel","Banca.y.seguros")
data_final=merge(data_final,ballasa_p_mun |> dplyr::select(c(NOM_MUN,dplyr::matches(Names))),by.x='Sector--Municipio',by.y='NOM_MUN',all.x=T)
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. ))))
conteo_por_columna <- data_final2 |>
dplyr::summarise(dplyr::across(.fns = ~ sum(!is.na(.) ))) |>
tidyr::pivot_longer(
cols = everything(),
names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[vocacion |> substr(1,31)]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
source("~/.active-rstudio-document", echo=TRUE)
View(lista_regiones)
openxlsx::write.xlsx(lista_regiones,"conteo_municipios_Con_Vocacion_c_problematica_de_indicadores.xlsx")
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. ))))
conteo_por_columna <- data_final2 |>
dplyr::summarise(dplyr::across(.fns = ~ sum(!is.na(.) ))) |>
tidyr::pivot_longer(
cols = everything(),
names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--|-","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[vocacion |> substr(1,31)]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_regiones,"conteo_municipios_Con_Vocacion_c_problematica_de_indicadores.xlsx")
openxlsx::write.xlsx(lista_regiones,"conteo_municipios_Con_Vocacion_c_problematica_de_indicadores.xlsx")
lista_regiones=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=5) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. ))))
conteo_por_columna <- data_final2 |>
dplyr::summarise(dplyr::across(.fns = ~ sum(!is.na(.) ))) |>
tidyr::pivot_longer(
cols = everything(),
names_to = "nombre_columna",
values_to = "conteo_valores_no_vacios"
)
# Inicializar la columna para la parte removida
conteo_por_columna$prefijo_extraido <- NA_character_
for (tema_seleccionado in unique(copia_colnames)[3:9]) { # Asegúrate de que los índices sean correctos para tus temas
patron <- paste0(tema_seleccionado, "--")
# Usamos stringr::str_detect para verificar si el patrón existe
# y str_extract para extraerlo, y str_remove para limpiar el nombre
rows_to_update <- stringr::str_detect(conteo_por_columna$nombre_columna, stringr::fixed(patron))
# Solo actualiza si hay filas que coinciden
if (any(rows_to_update)) {
# Almacenar el prefijo antes de removerlo
conteo_por_columna$prefijo_extraido[rows_to_update] <-
stringr::str_squish(gsub("[0-9]","",gsub("\\."," ",gsub("--|-","",stringr::str_extract(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))))))
# Remover el prefijo
conteo_por_columna$nombre_columna[rows_to_update] <-
stringr::str_remove(conteo_por_columna$nombre_columna[rows_to_update], stringr::fixed(patron))
}
}
lista_regiones[[vocacion |> substr(1,31)]] <- conteo_por_columna |> dplyr::arrange(dplyr::desc(conteo_valores_no_vacios))
print(conteo_por_columna)
}
lista_regiones["Minería.Metálicos"]
lista_regiones["Minería.Metálicos"] |> write.csv("MIN_MET_conteo_municipios_Con_Vocacion_c_problematica_de_indicadores.csv")
base_problemas_Aprobacion=sav |>
dplyr::select(MPO_INEGI,P10,P15,PESOF)
#conteo de problemáticas de las percepciones a nivel region-vocacional desde la encuesta del informe
library(foreign)
cat_sav=read.spss("../../../Tareas/PostInforme 2024 aceptacion_problematicas/Base Hidalgo Noviembre 2024 Post Informe.SAV")
sav=foreign::read.spss("../../../Tareas/PostInforme 2024 aceptacion_problematicas/Base Hidalgo Noviembre 2024 Post Informe.SAV",to.data.frame = T)
#mujeres que tienen hijes están afiliadas al pan
variable_labels <- attr(sav, "variable.labels")
sav[is.na(sav)]='-'
variables=as.data.frame(matrix(c(colnames(sav),variable_labels),ncol=2,nrow=length(colnames(sav)),byrow = F))
#library(dplyr)
# Asigna las etiquetas como nombres de las columnas
colnames(sav) <- variable_labels
colnames(sav)[345]="PESOF"
View(sav)
sav=foreign::read.spss("../../../Tareas/PostInforme 2024 aceptacion_problematicas/Base Hidalgo Noviembre 2024 Post Informe.SAV",to.data.frame = T)
View(cat_sav)
#colnames(sav)[345]="PESOF"
base_problemas_Aprobacion=sav |>
dplyr::select(MPO_INEGI,P10,P15,PESOF)
View(base_problemas_Aprobacion)
#base_problemas_Aprobacion=merge(base_problemas_Aprobacion,regiones,by.x='MPO_INEGI',by.y='Municipio',all.x=T)
#Este será por región vocacional.
base_problemas_Aprobacion=base_problemas_Aprobacion |>
dplyr::group_by(MPO_INEGI,P10) |>
#dplyr::mutate(Región=as.character(Región)) |>
dplyr::mutate(P10=as.character(P10)) |>
dplyr::summarise(suma_problematicas=sum(PESOF,na.rm = T))
municipios_problemas=base_problemas_Aprobacion |> tidyr::pivot_wider(names_from = P10,values_from = suma_problematicas)
View(municipios_problemas)
municipios_problemas_en_porc=municipios_problemas
municipios_problemas_en_porc[,-1]=municipios_problemas |>dplyr::ungroup() |>  dplyr::select(AGUA:TODO) |> lapply(FUN=\(x){
100*x/rowSums(municipios_problemas |>dplyr::ungroup() |>  dplyr::select(AGUA:TODO),na.rm = T)
})
www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
View(www)
View(municipios_problemas)
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
View(data_final2)
View(municipios_problemas)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
View(vocacion_municipios_problemas)
municipios_problemas_en_porc=vocacion_municipios_problemas
municipios_problemas_en_porc[,-1]=municipios_problemas_en_porc |>dplyr::ungroup() |>  dplyr::select(AGUA:TODO) |> lapply(FUN=\(x){
100*x/rowSums(municipios_problemas_en_porc |>dplyr::ungroup() |>  dplyr::select(AGUA:TODO),na.rm = T)
})
View(municipios_problemas_en_porc)
municipios_problemas_en_porc=vocacion_municipios_problemas |> dplyr::summarise_all(sum(na.rm = T))
municipios_problemas_en_porc=vocacion_municipios_problemas |> dplyr::summarise_all(sum,na.rm=T)
View(municipios_problemas_en_porc)
municipios_problemas_en_porc=vocacion_municipios_problemas
View(municipios_problemas_en_porc)
municipios_problemas_en_porc=vocacion_municipios_problemas
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1]
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T)
municipios_problemas_en_porc
municipios_problemas_en_porc |> sum()
municipios_problemas[,-1] |> colSums(na.rm = T) |> sum()
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as.data.frame()
View(municipios_problemas_en_porc)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as.data.frame()
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(`colSums(vocacion_municipios_problemas[, -1], na.rm = T)`))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
openxlsx::write.xlsx(lista_vocaciones_percepcion,sep=',',"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
openxlsx::write.xlsx(lista_vocaciones_percepcion,sep=',',"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
openxlsx::write.xlsx(lista_vocaciones_percepcion,asTable = T,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
View(lista_regiones)
View(lista_vocaciones_percepcion)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble()
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble()
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(`colSums(vocacion_municipios_problemas[, -1], na.rm = T)`))
#print(conteo_por_columna)
}
View(municipios_problemas_en_porc)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(`colSums(vocacion_municipios_problemas[, -1], na.rm = T)`))
#print(conteo_por_columna)
}
View(municipios_problemas_en_porc)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,asTable = T,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
View(lista_vocaciones_percepcion)
View(municipios_problemas_en_porc)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,asTable = T,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,asTable = T,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::mutate(en_porc=100*(vale/sum(municipios_problemas_en_porc$value,na.rm = T)))
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::mutate(en_porc=100*(value/sum(municipios_problemas_en_porc$value,na.rm = T)))
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
openxlsx::write.xlsx(lista_vocaciones_percepcion,"conteo_poblacion_mun_top10_p_vocacion_por_problematica_percepcion_encuesta_post_informe.xlsx")
View(lista_vocaciones_percepcion)
lista_vocaciones_percepcion[["Industria.Química"]][["name"]]
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=10) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
View(vocacion_municipios_problemas)
lista_vocaciones_percepcion=list()
for (vocacion in Names) {
print(paste("------------------- Vocacion:", vocacion, "-------------------"))
data_final2 <- data_final |>
dplyr::arrange(dplyr::desc(dplyr::across(vocacion)))|>
dplyr::slice_head(n=5) |>
dplyr::select(-c(dplyr::matches(Names))) |>
dplyr::select(where(~!all(. == "" | is.na(. )))) |>
dplyr::select(`Sector--Municipio`)
vocacion_municipios_problemas=municipios_problemas |>
dplyr::filter(MPO_INEGI%in% data_final2$`Sector--Municipio`)
municipios_problemas_en_porc=vocacion_municipios_problemas[,-1] |> colSums(na.rm = T) |> as_tibble(rownames = NA)
municipios_problemas_en_porc$name=rownames(municipios_problemas_en_porc)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::relocate(name,.before = value)
municipios_problemas_en_porc=municipios_problemas_en_porc |>
dplyr::mutate(en_porc=100*(value/sum(municipios_problemas_en_porc$value,na.rm = T)))
#www=municipios_problemas_en_porc |> tidyr::pivot_longer(names_to = "Problematica",values_to = "Porcentaje",cols = AGUA:TODO)
lista_vocaciones_percepcion[[vocacion |> substr(1,31)]] <-municipios_problemas_en_porc |> dplyr::arrange(dplyr::desc(value))
#print(conteo_por_columna)
}
lista_vocaciones_percepcion$Minería.Metálicos
lista_vocaciones_percepcion$Minería.Metálicos |> write.csv("MIN_MET_conteo_poblacion_mun_top5_p_vocacion_por_problematica_percepcion_encuesta_post_informe.csv")
municipios_problemas[,-1] |> colSums(na.rm = T) |> sum()
2377357/3085000
View(sav)
